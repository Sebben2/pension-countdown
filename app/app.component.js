"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var appSettings = require("application-settings");
var nativescript_insomnia_1 = require("nativescript-insomnia");
var application = require("application");
var AppComponent = /** @class */ (function () {
    function AppComponent() {
        var _this = this;
        this.pensionDate = new Date(appSettings.getNumber('pensionDate', (new Date(2018, 9, 3)).valueOf()));
        this.daysLeft = this.updateDaysLeft();
        this.fullCombWidth = this.updateCombWidth();
        this.dateModificationVisibility = "hidden";
        // comb must be updated to reflect the amount of days left
        setInterval(function () { return _this.updateComb(); }, 60000);
        nativescript_insomnia_1.keepAwake().then(function () {
            console.log("Insomnia is active");
        });
        var window = application.android.startActivity.getWindow();
        var decorView = window.getDecorView();
        decorView.setSystemUiVisibility(android.view.View.SYSTEM_UI_FLAG_LAYOUT_STABLE
            | android.view.View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
            | android.view.View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
            | android.view.View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
            | android.view.View.SYSTEM_UI_FLAG_FULLSCREEN
            | android.view.View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
    }
    AppComponent.prototype.addDays = function (days) {
        this.pensionDate = new Date(this.pensionDate.setDate(this.pensionDate.getDate() + days));
        appSettings.setNumber('pensionDate', this.pensionDate.valueOf());
        this.updateComb();
    };
    AppComponent.prototype.updateComb = function () {
        this.daysLeft = this.updateDaysLeft();
        this.fullCombWidth = this.updateCombWidth();
    };
    AppComponent.prototype.updateDaysLeft = function () {
        return Math.max(Math.ceil((this.pensionDate.valueOf() - (new Date()).valueOf()) / (1000 * 60 * 60 * 24)), 0);
    };
    AppComponent.prototype.updateCombWidth = function () {
        var widthIncrement = 7.833333333333;
        return Math.max(60 + Math.floor(this.daysLeft * widthIncrement), 0);
    };
    AppComponent.prototype.toggleModificationVisibility = function () {
        this.dateModificationVisibility = this.dateModificationVisibility == "hidden" ? "visible" : "hidden";
    };
    AppComponent.prototype.editButtonStyle = function () {
        return (this.dateModificationVisibility == "hidden" ? "btn btn-secondary" : "btn btn-primary");
    };
    AppComponent = __decorate([
        core_1.Component({
            selector: "days-counter",
            templateUrl: 'app.component.html',
            styleUrls: ['app.component.css']
        }),
        __metadata("design:paramtypes", [])
    ], AppComponent);
    return AppComponent;
}());
exports.AppComponent = AppComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMEM7QUFDMUMsa0RBQW9EO0FBQ3BELCtEQUFtRTtBQUNuRSx5Q0FBMkM7QUFRM0M7SUEyQkU7UUFBQSxpQkFjQztRQWxCRCxnQkFBVyxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1RixhQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ2pDLGtCQUFhLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3ZDLCtCQUEwQixHQUFHLFFBQVEsQ0FBQztRQUVwQywwREFBMEQ7UUFDMUQsV0FBVyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsVUFBVSxFQUFFLEVBQWpCLENBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUMsaUNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQztZQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQTtRQUNGLElBQUksTUFBTSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNELElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0QyxTQUFTLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsNEJBQTRCO2NBQzFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFDQUFxQztjQUN2RCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0M7Y0FDbEQsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsOEJBQThCO2NBQ2hELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHlCQUF5QjtjQUMzQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUF4Q0QsOEJBQU8sR0FBUCxVQUFRLElBQUk7UUFDVixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN6RixXQUFXLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFDRCxpQ0FBVSxHQUFWO1FBQ0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQUNELHFDQUFjLEdBQWQ7UUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFDLENBQUMsSUFBSSxHQUFDLEVBQUUsR0FBQyxFQUFFLEdBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztJQUN0RyxDQUFDO0lBQ0Qsc0NBQWUsR0FBZjtRQUNFLElBQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQztRQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFDLGNBQWMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFDRCxtREFBNEIsR0FBNUI7UUFDRSxJQUFJLENBQUMsMEJBQTBCLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDdkcsQ0FBQztJQUNELHNDQUFlLEdBQWY7UUFDRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBdEJVLFlBQVk7UUFMeEIsZ0JBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFdBQVcsRUFBRSxvQkFBb0I7WUFDakMsU0FBUyxFQUFFLENBQUMsbUJBQW1CLENBQUM7U0FDakMsQ0FBQzs7T0FDVyxZQUFZLENBMEN4QjtJQUFELG1CQUFDO0NBQUEsQUExQ0QsSUEwQ0M7QUExQ1ksb0NBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgKiBhcyBhcHBTZXR0aW5ncyBmcm9tIFwiYXBwbGljYXRpb24tc2V0dGluZ3NcIjtcclxuaW1wb3J0IHsga2VlcEF3YWtlLCBhbGxvd1NsZWVwQWdhaW4gfSBmcm9tIFwibmF0aXZlc2NyaXB0LWluc29tbmlhXCI7XHJcbmltcG9ydCAqIGFzIGFwcGxpY2F0aW9uIGZyb20gXCJhcHBsaWNhdGlvblwiO1xyXG5kZWNsYXJlIHZhciBhbmRyb2lkOiBhbnk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogXCJkYXlzLWNvdW50ZXJcIixcclxuICB0ZW1wbGF0ZVVybDogJ2FwcC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJ2FwcC5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XHJcbiAgYWRkRGF5cyhkYXlzKSB7XHJcbiAgICB0aGlzLnBlbnNpb25EYXRlID0gbmV3IERhdGUodGhpcy5wZW5zaW9uRGF0ZS5zZXREYXRlKHRoaXMucGVuc2lvbkRhdGUuZ2V0RGF0ZSgpICsgZGF5cykpO1xyXG4gICAgYXBwU2V0dGluZ3Muc2V0TnVtYmVyKCdwZW5zaW9uRGF0ZScsdGhpcy5wZW5zaW9uRGF0ZS52YWx1ZU9mKCkpO1xyXG4gICAgdGhpcy51cGRhdGVDb21iKCk7XHJcbiAgfVxyXG4gIHVwZGF0ZUNvbWIoKSB7XHJcbiAgICB0aGlzLmRheXNMZWZ0ID0gdGhpcy51cGRhdGVEYXlzTGVmdCgpO1xyXG4gICAgdGhpcy5mdWxsQ29tYldpZHRoID0gdGhpcy51cGRhdGVDb21iV2lkdGgoKTsgICAgXHJcbiAgfVxyXG4gIHVwZGF0ZURheXNMZWZ0KCkgeyAgICBcclxuICAgIHJldHVybiBNYXRoLm1heChNYXRoLmNlaWwoKHRoaXMucGVuc2lvbkRhdGUudmFsdWVPZigpIC0gKG5ldyBEYXRlKCkpLnZhbHVlT2YoKSkvKDEwMDAqNjAqNjAqMjQpKSwwKTtcclxuICB9XHJcbiAgdXBkYXRlQ29tYldpZHRoKCkge1xyXG4gICAgY29uc3Qgd2lkdGhJbmNyZW1lbnQgPSA3LjgzMzMzMzMzMzMzMzsgIFxyXG4gICAgcmV0dXJuIE1hdGgubWF4KDYwICsgTWF0aC5mbG9vcih0aGlzLmRheXNMZWZ0KndpZHRoSW5jcmVtZW50KSwwKTtcclxuICB9XHJcbiAgdG9nZ2xlTW9kaWZpY2F0aW9uVmlzaWJpbGl0eSgpIHtcclxuICAgIHRoaXMuZGF0ZU1vZGlmaWNhdGlvblZpc2liaWxpdHkgPSB0aGlzLmRhdGVNb2RpZmljYXRpb25WaXNpYmlsaXR5ID09IFwiaGlkZGVuXCIgPyBcInZpc2libGVcIiA6IFwiaGlkZGVuXCI7XHJcbiAgfVxyXG4gIGVkaXRCdXR0b25TdHlsZSgpIHtcclxuICAgIHJldHVybiAodGhpcy5kYXRlTW9kaWZpY2F0aW9uVmlzaWJpbGl0eSA9PSBcImhpZGRlblwiID8gXCJidG4gYnRuLXNlY29uZGFyeVwiIDogXCJidG4gYnRuLXByaW1hcnlcIik7XHJcbiAgfVxyXG4gIHBlbnNpb25EYXRlID0gbmV3IERhdGUoYXBwU2V0dGluZ3MuZ2V0TnVtYmVyKCdwZW5zaW9uRGF0ZScsKG5ldyBEYXRlKDIwMTgsOSwzKSkudmFsdWVPZigpKSk7XHJcbiAgZGF5c0xlZnQgPSB0aGlzLnVwZGF0ZURheXNMZWZ0KCk7XHJcbiAgZnVsbENvbWJXaWR0aCA9IHRoaXMudXBkYXRlQ29tYldpZHRoKCk7XHJcbiAgZGF0ZU1vZGlmaWNhdGlvblZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgLy8gY29tYiBtdXN0IGJlIHVwZGF0ZWQgdG8gcmVmbGVjdCB0aGUgYW1vdW50IG9mIGRheXMgbGVmdFxyXG4gICAgc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy51cGRhdGVDb21iKCksIDYwMDAwKTtcclxuICAgIGtlZXBBd2FrZSgpLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiSW5zb21uaWEgaXMgYWN0aXZlXCIpO1xyXG4gICAgfSlcclxuICAgIGxldCB3aW5kb3cgPSBhcHBsaWNhdGlvbi5hbmRyb2lkLnN0YXJ0QWN0aXZpdHkuZ2V0V2luZG93KCk7XHJcbiAgICBsZXQgZGVjb3JWaWV3ID0gd2luZG93LmdldERlY29yVmlldygpO1xyXG4gICAgZGVjb3JWaWV3LnNldFN5c3RlbVVpVmlzaWJpbGl0eShhbmRyb2lkLnZpZXcuVmlldy5TWVNURU1fVUlfRkxBR19MQVlPVVRfU1RBQkxFXHJcbiAgICAgIHwgYW5kcm9pZC52aWV3LlZpZXcuU1lTVEVNX1VJX0ZMQUdfTEFZT1VUX0hJREVfTkFWSUdBVElPTlxyXG4gICAgICB8IGFuZHJvaWQudmlldy5WaWV3LlNZU1RFTV9VSV9GTEFHX0xBWU9VVF9GVUxMU0NSRUVOXHJcbiAgICAgIHwgYW5kcm9pZC52aWV3LlZpZXcuU1lTVEVNX1VJX0ZMQUdfSElERV9OQVZJR0FUSU9OXHJcbiAgICAgIHwgYW5kcm9pZC52aWV3LlZpZXcuU1lTVEVNX1VJX0ZMQUdfRlVMTFNDUkVFTlxyXG4gICAgICB8IGFuZHJvaWQudmlldy5WaWV3LlNZU1RFTV9VSV9GTEFHX0lNTUVSU0lWRV9TVElDS1kpO1xyXG4gIH1cclxufSJdfQ==